{"ast":null,"code":"var _jsxFileName = \"/home/probook/sample-Project-1/src/containers/Form/index.js\";\nimport debounce from \"lodash/debounce\";\nimport React from \"react\";\nimport { withFormik } from \"formik\";\nimport Input from \"../../components/Input\";\nimport DisplayFormikState from \"../../components/DisplayFormState\";\nimport { resetMessage, setMessage } from \"../../actions/message\";\nimport store from \"../../store\";\nimport * as Yup from \"yup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formikEnhancer = withFormik({\n  validationSchema: Yup.object().shape({\n    email: Yup.string().email(\"Invalid email address\").required(\"Email is required!\"),\n    name: Yup.string().name(\"Invalid name\").required(\"Name should be required please\"),\n    password: Yup.string().name(\"Invalid password\").required(\"password should be required please\")\n  }),\n  mapPropsToValues: props => ({\n    email: \"\",\n    name: \"\",\n    password: \"\"\n  }),\n  handleSubmit: (values, {\n    setSubmitting\n  }) => {\n    const payload = { ...values\n    };\n    setTimeout(() => {\n      alert(JSON.stringify(payload, null, 2));\n      setSubmitting(false);\n    }, 1000);\n  },\n  displayName: \"MyForm\"\n});\n\nconst handleFormReset = handleReset => {\n  store.dispatch(resetMessage());\n  handleReset();\n};\n\nconst validateField = debounce(({\n  errors,\n  value\n}) => !errors && value ? store.dispatch(setMessage()) : store.dispatch(resetMessage()), 500);\n\nconst MyForm = props => {\n  const {\n    values,\n    touched,\n    dirty,\n    errors,\n    handleBlur,\n    handleChange,\n    handleReset,\n    handleSubmit,\n    isSubmitting\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      name: \"email\",\n      label: \"Email\",\n      type: \"email\",\n      placeholder: \"Enter an email address.\",\n      errors: errors.email,\n      value: values.email,\n      touched: touched.email,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      validateField: validateField\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      name: \"password\",\n      label: \"Password\",\n      type: \"password\",\n      placeholder: \"Enter an email address.\",\n      errors: errors.password,\n      value: values.password,\n      touched: touched.password,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      validateField: validateField\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"outline\",\n      onClick: () => handleFormReset(handleReset),\n      disabled: !dirty || isSubmitting,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      disabled: isSubmitting,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DisplayFormikState, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_c = MyForm;\nexport default _c2 = formikEnhancer(MyForm);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MyForm\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/probook/sample-Project-1/src/containers/Form/index.js"],"names":["debounce","React","withFormik","Input","DisplayFormikState","resetMessage","setMessage","store","Yup","formikEnhancer","validationSchema","object","shape","email","string","required","name","password","mapPropsToValues","props","handleSubmit","values","setSubmitting","payload","setTimeout","alert","JSON","stringify","displayName","handleFormReset","handleReset","dispatch","validateField","errors","value","MyForm","touched","dirty","handleBlur","handleChange","isSubmitting"],"mappings":"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","sourcesContent":["import debounce from \"lodash/debounce\";\nimport React from \"react\";\nimport { withFormik } from \"formik\";\nimport Input from \"../../components/Input\";\nimport DisplayFormikState from \"../../components/DisplayFormState\";\nimport { resetMessage, setMessage } from \"../../actions/message\";\nimport store from \"../../store\";\nimport * as Yup from \"yup\";\n\nconst formikEnhancer = withFormik({\n  validationSchema: Yup.object().shape({\n    email: Yup.string()\n      .email(\"Invalid email address\")\n      .required(\"Email is required!\"),\n    name: Yup.string()\n      .name(\"Invalid name\")\n      .required(\"Name should be required please\"),\n    password: Yup.string()\n      .name(\"Invalid password\")\n      .required(\"password should be required please\"),\n  }),\n  mapPropsToValues: (props) => ({\n    email: \"\",\n    name: \"\",\n    password: \"\",\n  }),\n  handleSubmit: (values, { setSubmitting }) => {\n    const payload = {\n      ...values,\n    };\n\n    setTimeout(() => {\n      alert(JSON.stringify(payload, null, 2));\n      setSubmitting(false);\n    }, 1000);\n  },\n  displayName: \"MyForm\",\n});\n\nconst handleFormReset = (handleReset) => {\n  store.dispatch(resetMessage());\n  handleReset();\n};\n\nconst validateField = debounce(\n  ({ errors, value }) =>\n    !errors && value\n      ? store.dispatch(setMessage())\n      : store.dispatch(resetMessage()),\n  500\n);\n\nconst MyForm = (props) => {\n  const {\n    values,\n    touched,\n    dirty,\n    errors,\n    handleBlur,\n    handleChange,\n    handleReset,\n    handleSubmit,\n    isSubmitting,\n  } = props;\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Input\n        name=\"email\"\n        label=\"Email\"\n        type=\"email\"\n        placeholder=\"Enter an email address.\"\n        errors={errors.email}\n        value={values.email}\n        touched={touched.email}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        validateField={validateField}\n      />\n      <Input\n        name=\"password\"\n        label=\"Password\"\n        type=\"password\"\n        placeholder=\"Enter an email address.\"\n        errors={errors.password}\n        value={values.password}\n        touched={touched.password}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        validateField={validateField}\n      />\n      <button\n        type=\"button\"\n        className=\"outline\"\n        onClick={() => handleFormReset(handleReset)}\n        disabled={!dirty || isSubmitting}\n      >\n        Reset\n      </button>\n      <button type=\"submit\" disabled={isSubmitting}>\n        Submit\n      </button>\n\n      <DisplayFormikState {...props} />\n    </form>\n  );\n};\n\nexport default formikEnhancer(MyForm);\n"]},"metadata":{},"sourceType":"module"}