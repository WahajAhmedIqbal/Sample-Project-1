{"ast":null,"code":"var _jsxFileName = \"/home/probook/sample-Project-1/src/components/formValidation/index.js\",\n    _s = $RefreshSig$();\n\n// import React from \"react\";\n// import \"./index.css\";\n// import { Button } from \"antd\";\n// import { useForm } from \"react-hook-form\";\n// import { yupResolver } from \"@hookform/resolvers/yup\";\n// import * as yup from \"yup\";\n// const schema = yup.object().shape({\n//   Name: yup.string().required(\"First Name should be required please\"),\n//   email: yup.string().email().required(),\n//   password: yup.string().min(4).max(15).required(),\n// });\n// function FormValidation() {\n//   const { register, handleSubmit, errors } = useForm({\n//     resolver: yupResolver(schema),\n//   });\n//   const submitForm = (data) => {\n//     console.log(data);\n//   };\n//   return (\n//     <div className=\"Form\">\n//       <div className=\"title\">Form Validation</div>\n//       <div className=\"inputs\">\n//         <form onSubmit={handleSubmit(submitForm)}>\n//           <input\n//             type=\"text\"\n//             name=\"Name\"\n//             ref={register}\n//             placeholder=\"First Name...\"\n//           />\n//           <p> {errors.Name?.message} </p>\n//           <input\n//             type=\"text\"\n//             name=\"email\"\n//             placeholder=\"Email...\"\n//             ref={register}\n//           />\n//           <p> {errors.email?.message} </p>\n//           <input\n//             type=\"password\"\n//             name=\"password\"\n//             placeholder=\"Password...\"\n//             ref={register}\n//           />\n//           <p> {errors.password?.message} </p>\n//           <input type=\"submit\" id=\"submit\" />\n//         </form>\n//       </div>\n//     </div>\n//   );\n// }\n// export default FormValidation;\n// ---------------------\nimport { Form, Input, Button, Checkbox } from \"antd\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst layout = {\n  labelCol: {\n    span: 8\n  },\n  wrapperCol: {\n    span: 16\n  }\n};\nconst tailLayout = {\n  wrapperCol: {\n    offset: 8,\n    span: 16\n  }\n};\nconst schema = yup.object().shape({\n  Name: yup.string().required(\"First Name should be required please\"),\n  email: yup.string().email().required(),\n  password: yup.string().min(4).max(15).required()\n});\n\nconst FormValidation1 = () => {\n  _s();\n\n  var _errors$Name, _errors$email, _errors$password;\n\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm({\n    resolver: yupResolver(schema)\n  });\n\n  const submitForm = data => {\n    console.log(data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, { ...layout,\n    onSubmit: handleSubmit(submitForm),\n    children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n      type: \"text\",\n      name: \"Name\",\n      ref: register,\n      placeholder: \"First Name...\",\n      children: [/*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", (_errors$Name = errors.Name) === null || _errors$Name === void 0 ? void 0 : _errors$Name.message, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      type: \"text\",\n      name: \"email\",\n      ref: register,\n      placeholder: \"First email...\",\n      children: [/*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      type: \"password\",\n      name: \"password\",\n      placeholder: \"Password...\",\n      ref: register,\n      children: [/*#__PURE__*/_jsxDEV(Input.Password, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", (_errors$password = errors.password) === null || _errors$password === void 0 ? void 0 : _errors$password.message, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, { ...tailLayout,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FormValidation1, \"iyH731LTjAbxnbpM16EGorBPneQ=\", false, function () {\n  return [useForm];\n});\n\n_c = FormValidation1;\nexport default FormValidation1;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormValidation1\");","map":{"version":3,"sources":["/home/probook/sample-Project-1/src/components/formValidation/index.js"],"names":["Form","Input","Button","Checkbox","React","useForm","yupResolver","yup","layout","labelCol","span","wrapperCol","tailLayout","offset","schema","object","shape","Name","string","required","email","password","min","max","FormValidation1","register","handleSubmit","errors","resolver","submitForm","data","console","log","message"],"mappings":"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","sourcesContent":["// import React from \"react\";\n// import \"./index.css\";\n// import { Button } from \"antd\";\n// import { useForm } from \"react-hook-form\";\n// import { yupResolver } from \"@hookform/resolvers/yup\";\n// import * as yup from \"yup\";\n\n// const schema = yup.object().shape({\n//   Name: yup.string().required(\"First Name should be required please\"),\n\n//   email: yup.string().email().required(),\n\n//   password: yup.string().min(4).max(15).required(),\n// });\n\n// function FormValidation() {\n//   const { register, handleSubmit, errors } = useForm({\n//     resolver: yupResolver(schema),\n//   });\n\n//   const submitForm = (data) => {\n//     console.log(data);\n//   };\n//   return (\n//     <div className=\"Form\">\n//       <div className=\"title\">Form Validation</div>\n//       <div className=\"inputs\">\n//         <form onSubmit={handleSubmit(submitForm)}>\n//           <input\n//             type=\"text\"\n//             name=\"Name\"\n//             ref={register}\n//             placeholder=\"First Name...\"\n//           />\n//           <p> {errors.Name?.message} </p>\n\n//           <input\n//             type=\"text\"\n//             name=\"email\"\n//             placeholder=\"Email...\"\n//             ref={register}\n//           />\n//           <p> {errors.email?.message} </p>\n//           <input\n//             type=\"password\"\n//             name=\"password\"\n//             placeholder=\"Password...\"\n//             ref={register}\n//           />\n//           <p> {errors.password?.message} </p>\n\n//           <input type=\"submit\" id=\"submit\" />\n//         </form>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default FormValidation;\n\n// ---------------------\nimport { Form, Input, Button, Checkbox } from \"antd\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nconst layout = {\n  labelCol: {\n    span: 8,\n  },\n  wrapperCol: {\n    span: 16,\n  },\n};\nconst tailLayout = {\n  wrapperCol: {\n    offset: 8,\n    span: 16,\n  },\n};\nconst schema = yup.object().shape({\n  Name: yup.string().required(\"First Name should be required please\"),\n\n  email: yup.string().email().required(),\n\n  password: yup.string().min(4).max(15).required(),\n});\n\nconst FormValidation1 = () => {\n  const { register, handleSubmit, errors } = useForm({\n    resolver: yupResolver(schema),\n  });\n\n  const submitForm = (data) => {\n    console.log(data);\n  };\n  return (\n    <Form {...layout} onSubmit={handleSubmit(submitForm)}>\n      <Form.Item\n        type=\"text\"\n        name=\"Name\"\n        ref={register}\n        placeholder=\"First Name...\"\n      >\n        <Input />\n        <p> {errors.Name?.message} </p>\n      </Form.Item>\n\n      <Form.Item\n        type=\"text\"\n        name=\"email\"\n        ref={register}\n        placeholder=\"First email...\"\n      >\n        <Input />\n        <p> {errors.email?.message} </p>\n      </Form.Item>\n\n      <Form.Item\n        type=\"password\"\n        name=\"password\"\n        placeholder=\"Password...\"\n        ref={register}\n      >\n        <Input.Password />\n        <p> {errors.password?.message} </p>\n      </Form.Item>\n\n      <Form.Item {...tailLayout}>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Submit\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default FormValidation1;\n"]},"metadata":{},"sourceType":"module"}